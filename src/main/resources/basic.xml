<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 1.配置作用域 -->
	<!-- scope属性：默认值是singleton(单例，即容器针对一个bean的配置， 只会创建一个实例)
		 如果值是prototype(原型，会创建多个实例) -->
	<bean id="eb1" class="basic.ExampleBean" scope="prototype" />

	<!-- 2.配置生命周期相关的两个方法 -->
	<!-- init-method属性：初始化方法的名称
		 destory-method属性：销毁方法的名称
		 注：只有作用域为单例的bean时销毁方法才会执行 -->
	<bean id="mb1" class="basic.MessageBean" init-method="init"
		destroy-method="destory" scope="prototype" />

	<!-- 3.配置延迟加载 -->
	<!-- lazy-init属性：默认为false，在启动容器后直接预加载作用域为单例的bean，
		 若设置为true则 在容器开启时则不再预加载 -->
	<bean id="lz1" class="basic.LazyBean" lazy-init="true" />

</beans>


